import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import './css/cuttingView.css';
import '@fortawesome/fontawesome-free/css/all.min.css';
import { jsPDF } from 'jspdf';
import logo from '../assets/serendib-gems-logo.jpeg';

const CuttingView = () => {
  const [cuttingRequests, setCuttingRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [updatingId, setUpdatingId] = useState(null);
  const [statusUpdates, setStatusUpdates] = useState({});
  const [expandedCard, setExpandedCard] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const statusOptions = ['pending', 'in_progress', 'completed', 'cancelled'];
  const statusDisplay = {
    'pending': 'Pending',
    'in_progress': 'In Progress',
    'completed': 'Completed',
    'cancelled': 'Cancelled'
  };
  const statusColors = {
    'pending': '#f0ad4e',
    'in_progress': '#5bc0de',
    'completed': '#5cb85c',
    'cancelled': '#d9534f'
  };

  useEffect(() => {
    const fetchCuttingRequests = async () => {
      try {
        const response = await axios.get('http://localhost:8000/api/gem-cutting', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
          },
        });
        setCuttingRequests(response.data.data);
        setFilteredRequests(response.data.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch cutting requests. Please try again.');
        setLoading(false);
        console.error('Fetch error:', err.response?.data || err.message);
      }
    };

    fetchCuttingRequests();
  }, []);

  useEffect(() => {
    let filtered = cuttingRequests;

    if (searchTerm) {
      const lowerSearch = searchTerm.toLowerCase();
      filtered = filtered.filter(request =>
        request.gemstoneType.toLowerCase().includes(lowerSearch) ||
        request.userName.toLowerCase().includes(lowerSearch) ||
        request.email.toLowerCase().includes(lowerSearch)
      );
    }

    if (statusFilter) {
      filtered = filtered.filter(request => request.status === statusFilter);
    }

    setFilteredRequests(filtered);
  }, [searchTerm, statusFilter, cuttingRequests]);

  const generatePDF = (requests, filename) => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 15;
    const maxWidth = pageWidth - 2 * margin;

    const logoImg = new Image();
    logoImg.src = logo;

    const addHeader = () => {
      doc.setLineWidth(0.5);
      doc.setDrawColor(77, 171, 245);
      doc.rect(10, 10, pageWidth - 20, pageHeight - 20);

      doc.addImage(logoImg, 'JPEG', margin, margin, 30, 30);

      doc.setFontSize(20);
      doc.setTextColor(56, 68, 86);
      doc.text('Serendib Gems', pageWidth - margin - 60, margin + 10);
      doc.setFontSize(12);
      doc.setTextColor(90, 106, 130);
      doc.text('Gem Cutting Request Report', pageWidth - margin - 60, margin + 20);
    };

    const addFooter = () => {
      doc.setFontSize(10);
      doc.setTextColor(90, 106, 130);
      doc.text(`Generated by Serendib Gems on ${new Date().toLocaleDateString()}`, margin, pageHeight - margin);
      doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - margin - 20, pageHeight - margin);
    };

    requests.forEach((request, index) => {
      if (index > 0) doc.addPage();
      addHeader();
      
      let y = margin + 50;
      doc.setFontSize(14);
      doc.setTextColor(56, 68, 86);
      doc.text('Gem Cutting Request Details', margin, y);
      
      y += 10;
      doc.setLineWidth(0.2);
      doc.setDrawColor(200);
      doc.line(margin, y, pageWidth - margin, y);
      
      y += 10;
      doc.setFontSize(11);
      doc.setTextColor(56, 68, 86);

      doc.text('Gemstone Details:', margin, y);
      y += 7;
      doc.setTextColor(90, 106, 130);
      doc.text(`Gemstone Type: ${request.gemstoneType}`, margin + 5, y);
      y += 5;
      doc.text(`Rough Stone Weight: ${request.roughStoneWeight} ct`, margin + 5, y);
      y += 5;
      doc.text(`Shape of Rough Stone: ${request.shapeOfRoughStone}`, margin + 5, y);
      y += 5;
      doc.text(`Inclusion Location: ${request.inclusionLocation}`, margin + 5, y);
      
      y += 10;
      doc.setTextColor(56, 68, 86);
      doc.text('Cutting Specifications:', margin, y);
      y += 7;
      doc.setTextColor(90, 106, 130);
      doc.text(`Desired Shape: ${request.desiredShape}`, margin + 5, y);
      y += 5;
      doc.text(`Expected Weight: ${request.expectedWeightAfterCutting || 'N/A'} ct`, margin + 5, y);
      y += 5;
      doc.text(`Cutting Method: ${request.cuttingMethod}`, margin + 5, y);
      y += 5;
      doc.text(`Brilliance Priority: ${request.brilliancePriority}`, margin + 5, y);
      y += 5;
      doc.text(`Finish Level: ${request.finishLevel}`, margin + 5, y);
      y += 5;
      doc.text(`Color Quality: ${request.gemstoneColorQuality || 'N/A'}`, margin + 5, y);
      
      if (request.additionalNotes) {
        y += 10;
        doc.setTextColor(56, 68, 86);
        doc.text('Additional Notes:', margin, y);
        y += 7;
        doc.setTextColor(90, 106, 130);
        const splitNotes = doc.splitTextToSize(request.additionalNotes, maxWidth - 10);
        doc.text(splitNotes, margin + 5, y);
        y += splitNotes.length * 5 + 5;
      }

      y += 10;
      doc.setTextColor(56, 68, 86);
      doc.text('Contact Information:', margin, y);
      y += 7;
      doc.setTextColor(90, 106, 130);
      doc.text(`Preferred Cutter: ${request.cutter}`, margin + 5, y);
      y += 5;
      doc.text(`Client Name: ${request.userName}`, margin + 5, y);
      y += 5;
      doc.text(`Email: ${request.email}`, margin + 5, y);
      y += 5;
      doc.text(`Contact Number: ${request.contactNumber || 'N/A'}`, margin + 5, y);
      
      y += 10;
      doc.setTextColor(56, 68, 86);
      doc.text('Status:', margin, y);
      y += 7;
      doc.setTextColor(90, 106, 130);
      doc.text(`Status: ${statusDisplay[request.status]}`, margin + 5, y);

      addFooter();
    });

    doc.save(filename);
  };

  const handleDownloadSinglePDF = (request) => {
    generatePDF([request], `GemCuttingRequest_${request.gemstoneType}_${request._id}.pdf`);
  };

  const handleDownloadFilteredPDF = () => {
    if (filteredRequests.length === 0) {
      setError('No filtered requests to download.');
      return;
    }
    generatePDF(filteredRequests, 'GemCuttingRequests_Filtered.pdf');
  };

  const handleDownloadAllPDF = () => {
    if (cuttingRequests.length === 0) {
      setError('No requests to download.');
      return;
    }
    generatePDF(cuttingRequests, 'GemCuttingRequests_All.pdf');
  };

  const handleStatusUpdate = async (id) => {
    try {
      const newStatus = statusUpdates[id];
      if (!newStatus) return;

      const response = await axios.put(
        `http://localhost:8000/api/gem-cutting/${id}/status`,
        { status: newStatus },
        {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
          },
        }
      );

      setCuttingRequests((prevRequests) =>
        prevRequests.map((request) =>
          request._id === id ? { ...request, status: newStatus } : request
        )
      );
      setUpdatingId(null);
      setStatusUpdates((prev) => {
        const newUpdates = { ...prev };
        delete newUpdates[id];
        return newUpdates;
      });

      const notification = document.createElement('div');
      notification.className = 'cv-success-notification';
      notification.textContent = 'Status updated successfully!';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.add('cv-hide');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 500);
      }, 3000);
    } catch (err) {
      setError('Failed to update status. Please try again.');
      console.error('Update error:', err.response?.data || err.message);
    }
  };

  const handleStatusChange = (id, value) => {
    setStatusUpdates((prev) => ({
      ...prev,
      [id]: value,
    }));
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this cutting request?')) return;

    try {
      await axios.delete(`http://localhost:8000/api/gem-cutting/${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
        },
      });

      setCuttingRequests((prevRequests) => prevRequests.filter((request) => request._id !== id));

      const notification = document.createElement('div');
      notification.className = 'cv-success-notification cv-delete';
      notification.textContent = 'Cutting request deleted successfully!';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.add('cv-hide');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 500);
      }, 3000);
    } catch (err) {
      setError('Failed to delete request. Please try again.');
      console.error('Delete error:', err.response?.data || err.message);
    }
  };

  const getGemIcon = (gemType) => {
    const gemTypes = {
      'Diamond': 'fa-diamond',
      'Ruby': 'fa-gem',
      'Sapphire': 'fa-gem',
      'Emerald': 'fa-gem',
      'Amethyst': 'fa-gem',
      'Topaz': 'fa-gem',
      'Opal': 'fa-gem',
      'Pearl': 'fa-circle',
      'Jade': 'fa-square',
      'default': 'fa-gem'
    };
    return gemTypes[gemType] || gemTypes.default;
  };

  const getGemColor = (gemType) => {
    const gemColors = {
      'Diamond': '#e6f2ff',
      'Ruby': '#ffcccc',
      'Sapphire': '#cce0ff',
      'Emerald': '#ccffcc',
      'Amethyst': '#e6ccff',
      'Topaz': '#fff2cc',
      'Opal': '#fff',
      'Pearl': '#f2f2f2',
      'Jade': '#ccffcc',
      'default': '#e6e6e6'
    };
    return gemColors[gemType] || gemColors.default;
  };

  const toggleExpand = (id) => {
    setExpandedCard(expandedCard === id ? null : id);
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleStatusFilterChange = (e) => {
    setStatusFilter(e.target.value);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setStatusFilter('');
  };

  return (
    <div className="fin-dash-container">
      <div className="fin-dash-content">
        <nav className="fin-dash-sidebar">
          <div className="fin-dash-sidebar-header">
            <div className="fin-dash-logo">
              <img src={logo} alt="Serendib Gems" className="fin-dash-logo-image" />
              <div className="fin-dash-logo-text">Serendib Gems</div>
            </div>
          </div>
          <ul className="fin-dash-nav-items">
            <li className="fin-dash-nav-item">
              <Link to="/dashboard" className="fin-dash-nav-link">
                <i className="fas fa-chart-line"></i>
                <span>Dashboard</span>
              </Link>
            </li>
            <li className="fin-dash-nav-item">
              <Link to="/users" className="fin-dash-nav-link">
                <i className="fas fa-users"></i>
                <span>User Management</span>
              </Link>
            </li>
            <li className="fin-dash-nav-item">
              <Link to="/gemdashboard" className="fin-dash-nav-link">
                <i className="fas fa-boxes"></i>
                <span>Inventory Management</span>
              </Link>
            </li>
            <li className="fin-dash-nav-item">
              <Link to="/financereport" className="fin-dash-nav-link">
                <i className="fas fa-dollar-sign"></i>
                <span>Financial Management</span>
              </Link>
            </li>
            <li className="fin-dash-nav-item">
              <Link to="/cuttingview" className="fin-dash-nav-link active">
                <i className="fas fa-cut"></i>
                <span>Gem Cutting</span>
              </Link>
            </li>
            <li className="fin-dash-nav-item">
              <Link to="/shippingdisplay" className="fin-dash-nav-link">
                <i className="fas fa-truck"></i>
                <span>Delivery Management</span>
              </Link>
            </li>
          </ul>
        </nav>

        <main className="fin-dash-main-content">
          <div className="cv-cutting-view-container">
            <div className="cv-page-header">
              <div className="cv-header-title">
                <h1><i className="fas fa-cut"></i> Gem Cutting Requests</h1>
                <p className="cv-requests-count">
                  {searchTerm || statusFilter
                    ? `Showing ${filteredRequests.length} of ${cuttingRequests.length} requests`
                    : `Total Requests: ${cuttingRequests.length}`}
                </p>
              </div>
              <div className="cv-header-actions">
                <Link to="/adminreq">
                  <button className="cv-add-request-btn">
                    <i className="fas fa-plus"></i> New Request
                  </button>
                </Link>
                <button className="cv-download-all-btn" onClick={handleDownloadAllPDF}>
                  <i className="fas fa-download"></i> Download All
                </button>
                <button className="cv-download-filtered-btn" onClick={handleDownloadFilteredPDF}>
                  <i className="fas fa-download"></i> Download Filtered
                </button>
              </div>
            </div>

            <div className="cv-filter-search-container">
              <div className="cv-search-bar">
                <i className="fas fa-search"></i>
                <input
                  type="text"
                  placeholder="Search by gemstone, client name, or email..."
                  value={searchTerm}
                  onChange={handleSearchChange}
                />
              </div>
              <div className="cv-filter-select">
                <select
                  value={statusFilter}
                  onChange={handleStatusFilterChange}
                  className="cv-status-select"
                >
                  <option value="">All Statuses</option>
                  {statusOptions.map((status) => (
                    <option key={status} value={status}>
                      {statusDisplay[status]}
                    </option>
                  ))}
                </select>
              </div>
              {(searchTerm || statusFilter) && (
                <button className="cv-clear-filters-btn" onClick={clearFilters}>
                  <i className="fas fa-times"></i> Clear Filters
                </button>
              )}
            </div>

            {error && <div className="cv-error-message">{error}</div>}

            {loading ? (
              <div className="cv-loading-container">
                <div className="cv-loading-spinner"></div>
                <p>Loading gem cutting requests...</p>
              </div>
            ) : filteredRequests.length === 0 ? (
              <div className="cv-no-data-container">
                <i className="fas fa-search"></i>
                <p>No cutting requests found.</p>
                <Link to="/adminreq">
                  <button className="cv-add-request-btn">
                    <i className="fas fa-plus"></i> Create New Request
                  </button>
                </Link>
              </div>
            ) : (
              <div className="cv-gem-cards-container">
                {filteredRequests.map((request) => (
                  <div 
                    key={request._id} 
                    className={`cv-gem-card ${expandedCard === request._id ? 'cv-expanded' : ''}`}
                    style={{
                      '--gem-color': getGemColor(request.gemstoneType)
                    }}
                  >
                    <div className="cv-gem-card-header">
                      <div className="cv-gem-icon">
                        <i className={`fas ${getGemIcon(request.gemstoneType)}`}></i>
                      </div>
                      <div className="cv-gem-name">
                        <h3>{request.gemstoneType}</h3>
                        <div 
                          className="cv-status-badge"
                          style={{ backgroundColor: statusColors[request.status] }}
                        >
                          {statusDisplay[request.status]}
                        </div>
                      </div>
                      <div className="cv-card-actions">
                        <button 
                          className="cv-expand-btn" 
                          onClick={() => toggleExpand(request._id)}
                        >
                          <i className={`fas fa-chevron-${expandedCard === request._id ? 'up' : 'down'}`}></i>
                        </button>
                        <button 
                          className="cv-download-btn"
                          onClick={() => handleDownloadSinglePDF(request)}
                        >
                          <i className="fas fa-download"></i>
                        </button>
                      </div>
                    </div>

                    <div className="cv-gem-card-content">
                      <div className="cv-gem-info-section">
                        <h4>Gemstone Details</h4>
                        <div className="cv-gem-info-grid">
                          <div className="cv-info-item">
                            <label>Rough Stone Weight:</label>
                            <span>{request.roughStoneWeight} ct</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Shape of Rough Stone:</label>
                            <span>{request.shapeOfRoughStone}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Inclusion Location:</label>
                            <span>{request.inclusionLocation}</span>
                          </div>
                        </div>
                      </div>

                      <div className="cv-gem-info-section">
                        <h4>Cutting Specifications</h4>
                        <div className="cv-gem-info-grid cv-three-col">
                          <div className="cv-info-item">
                            <label>Desired Shape:</label>
                            <span>{request.desiredShape}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Expected Weight:</label>
                            <span>{request.expectedWeightAfterCutting || 'N/A'} ct</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Cutting Method:</label>
                            <span>{request.cuttingMethod}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Brilliance Priority:</label>
                            <span>{request.brilliancePriority}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Finish Level:</label>
                            <span>{request.finishLevel}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Color Quality:</label>
                            <span>{request.gemstoneColorQuality || 'N/A'}</span>
                          </div>
                        </div>
                        {request.additionalNotes && (
                          <div className="cv-notes-section">
                            <label>Additional Notes:</label>
                            <p>{request.additionalNotes}</p>
                          </div>
                        )}
                      </div>

                      <div className="cv-gem-info-section">
                        <h4>Contact Information</h4>
                        <div className="cv-gem-info-grid cv-three-col">
                          <div className="cv-info-item">
                            <label>Preferred Cutter:</label>
                            <span>{request.cutter}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Client Name:</label>
                            <span>{request.userName}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Email:</label>
                            <span>{request.email}</span>
                          </div>
                          <div className="cv-info-item">
                            <label>Contact Number:</label>
                            <span>{request.contactNumber || 'N/A'}</span>
                          </div>
                        </div>
                      </div>

                      <div className="cv-gem-card-footer">
                        {updatingId === request._id ? (
                          <div className="cv-status-update-controls">
                            <select
                              value={statusUpdates[request._id] || request.status}
                              onChange={(e) => handleStatusChange(request._id, e.target.value)}
                              className="cv-status-select"
                            >
                              {statusOptions.map((status) => (
                                <option key={status} value={status}>
                                  {statusDisplay[status]}
                                </option>
                              ))}
                            </select>
                            <div className="cv-action-buttons">
                              <button
                                className="cv-action-button cv-save"
                                onClick={() => handleStatusUpdate(request._id)}
                              >
                                <i className="fas fa-check"></i> Save
                              </button>
                              <button
                                className="cv-action-button cv-cancel"
                                onClick={() => {
                                  setUpdatingId(null);
                                  setStatusUpdates((prev) => {
                                    const newUpdates = { ...prev };
                                    delete newUpdates[request._id];
                                    return newUpdates;
                                  });
                                }}
                              >
                                <i className="fas fa-times"></i> Cancel
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div className="cv-card-buttons">
                            <button
                              className="cv-card-button cv-update"
                              onClick={() => setUpdatingId(request._id)}
                            >
                              <i className="fas fa-edit"></i> Update Status
                            </button>
                            <button
                              className="cv-card-button cv-delete"
                              onClick={() => handleDelete(request._id)}
                            >
                              <i className="fas fa-trash-alt"></i> Delete
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </main>
      </div>
    </div>
  );
};

export default CuttingView;